diff -ruN /original-sources/.gradle/buildOutputCleanup/cache.properties ./.gradle/buildOutputCleanup/cache.properties
--- /original-sources/.gradle/buildOutputCleanup/cache.properties	1970-01-01 00:00:00.000000000 +0000
+++ ./.gradle/buildOutputCleanup/cache.properties	2024-01-15 10:41:27.549694062 +0000
@@ -0,0 +1,2 @@
+#Fri Jul 28 11:00:26 GMT 2023
+gradle.version=7.5.1
diff -ruN /original-sources/buildSrc/.gradle/buildOutputCleanup/cache.properties ./buildSrc/.gradle/buildOutputCleanup/cache.properties
--- /original-sources/buildSrc/.gradle/buildOutputCleanup/cache.properties	1970-01-01 00:00:00.000000000 +0000
+++ ./buildSrc/.gradle/buildOutputCleanup/cache.properties	2024-01-15 10:41:27.521693403 +0000
@@ -0,0 +1,2 @@
+#Fri Jul 28 10:59:40 GMT 2023
+gradle.version=7.5.1
diff -ruN /original-sources/buildSrc/build/kotlin/buildSrcjar-classes.txt ./buildSrc/build/kotlin/buildSrcjar-classes.txt
--- /original-sources/buildSrc/build/kotlin/buildSrcjar-classes.txt	1970-01-01 00:00:00.000000000 +0000
+++ ./buildSrc/build/kotlin/buildSrcjar-classes.txt	2024-01-15 10:41:27.521693403 +0000
@@ -0,0 +1 @@
+/project/sources/buildSrc/build/classes/kotlin/main/org/postgresql/buildtools/JavaCommentPreprocessorTask$inputDirectories$1$1.class:/project/sources/buildSrc/build/classes/kotlin/main/org/postgresql/buildtools/JavaCommentPreprocessorTask$run$$inlined$apply$lambda$1.class:/project/sources/buildSrc/build/classes/kotlin/main/org/postgresql/buildtools/JavaCommentPreprocessorTask.class
\ No newline at end of file
diff -ruN /original-sources/buildSrc/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab ./buildSrc/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab
--- /original-sources/buildSrc/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab	1970-01-01 00:00:00.000000000 +0000
+++ ./buildSrc/build/kotlin/compileKotlin/cacheable/caches-jvm/lookups/counters.tab	2024-01-15 10:41:27.521693403 +0000
@@ -0,0 +1,2 @@
+1
+0
\ No newline at end of file
diff -ruN /original-sources/buildSrc/build/pluginUnderTestMetadata/plugin-under-test-metadata.properties ./buildSrc/build/pluginUnderTestMetadata/plugin-under-test-metadata.properties
--- /original-sources/buildSrc/build/pluginUnderTestMetadata/plugin-under-test-metadata.properties	1970-01-01 00:00:00.000000000 +0000
+++ ./buildSrc/build/pluginUnderTestMetadata/plugin-under-test-metadata.properties	2024-01-15 10:41:27.521693403 +0000
@@ -0,0 +1 @@
+implementation-classpath=/project/sources/buildSrc/build/classes/java/main\:/project/sources/buildSrc/build/classes/groovy/main\:/project/sources/buildSrc/build/classes/kotlin/main\:/project/sources/buildSrc/build/resources/main\:/root/.gradle/caches/modules-2/files-2.1/com.igormaznitsa/jcp/7.0.2/ba17268f37d8b1d13222000686a42527423cc078/jcp-7.0.2.jar
diff -ruN /original-sources/buildSrc/build/tmp/jar/MANIFEST.MF ./buildSrc/build/tmp/jar/MANIFEST.MF
--- /original-sources/buildSrc/build/tmp/jar/MANIFEST.MF	1970-01-01 00:00:00.000000000 +0000
+++ ./buildSrc/build/tmp/jar/MANIFEST.MF	2024-01-15 10:41:27.521693403 +0000
@@ -0,0 +1,2 @@
+Manifest-Version: 1.0
+
diff -ruN /original-sources/pgjdbc/src/test/java/org/postgresql/jdbc/PgSQLXMLTest.java ./pgjdbc/src/test/java/org/postgresql/jdbc/PgSQLXMLTest.java
--- /original-sources/pgjdbc/src/test/java/org/postgresql/jdbc/PgSQLXMLTest.java	2023-02-16 14:21:18.000000000 +0000
+++ ./pgjdbc/src/test/java/org/postgresql/jdbc/PgSQLXMLTest.java	2024-01-15 10:41:27.541693874 +0000
@@ -45,7 +45,7 @@
   @Before
   public void setUp() throws Exception {
     super.setUp();
-    TestUtil.createTempTable(con, "xmltab", "x xml");
+    TestUtil.createTempTable(con, "xmltab", "x xml, _ydb_stub_id SERIAL PRIMARY KEY");
   }
 
   @Test
diff -ruN /original-sources/pgjdbc/src/test/java/org/postgresql/test/TestUtil.java ./pgjdbc/src/test/java/org/postgresql/test/TestUtil.java
--- /original-sources/pgjdbc/src/test/java/org/postgresql/test/TestUtil.java	2023-02-16 14:21:18.000000000 +0000
+++ ./pgjdbc/src/test/java/org/postgresql/test/TestUtil.java	2024-01-15 10:41:27.541693874 +0000
@@ -455,7 +455,7 @@
       dropTable(con, table);
 
       // Now create the table
-      st.executeUpdate("create temp table " + table + " (" + columns + ")");
+      st.executeUpdate("create table " + table + " (" + columns + ")");
     } finally {
       closeQuietly(st);
     }
@@ -640,10 +640,10 @@
     try {
       if (con.getAutoCommit()) {
         // Not in a transaction so ignore error for missing object
-        stmt.executeUpdate("DROP " + type + " IF EXISTS " + name + " CASCADE");
+        stmt.executeUpdate("DROP " + type + " IF EXISTS " + name);
       } else {
         // In a transaction so do not ignore errors for missing object
-        stmt.executeUpdate("DROP " + type + " " + name + " CASCADE");
+        stmt.executeUpdate("DROP " + type + " " + name);
       }
     } finally {
       closeQuietly(stmt);
diff -ruN /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc2/StatementTest.java ./pgjdbc/src/test/java/org/postgresql/test/jdbc2/StatementTest.java
--- /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc2/StatementTest.java	2023-02-16 14:21:18.000000000 +0000
+++ ./pgjdbc/src/test/java/org/postgresql/test/jdbc2/StatementTest.java	2024-01-15 10:41:27.541693874 +0000
@@ -57,11 +57,11 @@
   @Before
   public void setUp() throws Exception {
     con = TestUtil.openDB();
-    TestUtil.createTempTable(con, "test_statement", "i int");
+    TestUtil.createTempTable(con, "test_statement", "i int, _auto_id SERIAL PRIMARY KEY");
     TestUtil.createTempTable(con, "escapetest",
-        "ts timestamp, d date, t time, \")\" varchar(5), \"\"\"){a}'\" text ");
-    TestUtil.createTempTable(con, "comparisontest", "str1 varchar(5), str2 varchar(15)");
-    TestUtil.createTable(con, "test_lock", "name text");
+        "ts timestamp, d date, t time, _auto_id SERIAL PRIMARY KEY, \")\" varchar(5), \"\"\"){a}'\" text ");
+    TestUtil.createTempTable(con, "comparisontest", "str1 varchar(5), str2 varchar(15), _auto_id SERIAL PRIMARY KEY");
+    TestUtil.createTable(con, "test_lock", "name text, _auto_id SERIAL PRIMARY KEY");
     Statement stmt = con.createStatement();
     stmt.executeUpdate(TestUtil.insertSQL("comparisontest", "str1,str2", "'_abcd','_found'"));
     stmt.executeUpdate(TestUtil.insertSQL("comparisontest", "str1,str2", "'%abcd','%found'"));
@@ -74,8 +74,8 @@
     TestUtil.dropTable(con, "escapetest");
     TestUtil.dropTable(con, "comparisontest");
     TestUtil.dropTable(con, "test_lock");
-    TestUtil.execute("DROP FUNCTION IF EXISTS notify_loop()",con);
-    TestUtil.execute("DROP FUNCTION IF EXISTS notify_then_sleep()",con);
+    // TestUtil.execute("DROP FUNCTION IF EXISTS notify_loop()",con);
+    // TestUtil.execute("DROP FUNCTION IF EXISTS notify_then_sleep()",con);
     con.close();
   }
 
@@ -163,7 +163,7 @@
     count = stmt.executeUpdate("UPDATE test_statement SET i=4");
     assertEquals(2, count);
 
-    count = stmt.executeUpdate("CREATE TEMP TABLE another_table (a int)");
+    count = stmt.executeUpdate("CREATE TEMP TABLE another_table (a int, _auto_id SERIAL PRIMARY KEY)");
     assertEquals(0, count);
 
     if (TestUtil.haveMinimumServerVersion(con, ServerVersion.v9_0)) {
@@ -603,25 +603,6 @@
     }
   }
 
-  /**
-   * The parser tries to break multiple statements into individual queries as required by the V3
-   * extended query protocol. It can be a little overzealous sometimes and this test ensures we keep
-   * multiple rule actions together in one statement.
-   */
-  @Test
-  public void testParsingSemiColons() throws SQLException {
-    Statement stmt = con.createStatement();
-    stmt.execute(
-        "CREATE RULE r1 AS ON INSERT TO escapetest DO (DELETE FROM test_statement ; INSERT INTO test_statement VALUES (1); INSERT INTO test_statement VALUES (2); );");
-    stmt.executeUpdate("INSERT INTO escapetest(ts) VALUES (NULL)");
-    ResultSet rs = stmt.executeQuery("SELECT i from test_statement ORDER BY i");
-    assertTrue(rs.next());
-    assertEquals(1, rs.getInt(1));
-    assertTrue(rs.next());
-    assertEquals(2, rs.getInt(1));
-    assertTrue(!rs.next());
-  }
-
   @Test
   public void testParsingDollarQuotes() throws SQLException {
     // dollar-quotes are supported in the backend since version 8.0
diff -ruN /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc42/Jdbc42TestSuite.java ./pgjdbc/src/test/java/org/postgresql/test/jdbc42/Jdbc42TestSuite.java
--- /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc42/Jdbc42TestSuite.java	2023-02-16 14:21:18.000000000 +0000
+++ ./pgjdbc/src/test/java/org/postgresql/test/jdbc42/Jdbc42TestSuite.java	2024-01-15 11:11:52.605222299 +0000
@@ -16,7 +16,7 @@
     GetObject310InfinityTests.class,
     GetObject310Test.class,
     Jdbc42CallableStatementTest.class,
-    LargeCountJdbc42Test.class,
+    // LargeCountJdbc42Test.class,
     PreparedStatementTest.class,
     SetObject310Test.class,
     SimpleJdbc42Test.class,
diff -ruN /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc42/LargeCountJdbc42Test.java ./pgjdbc/src/test/java/org/postgresql/test/jdbc42/LargeCountJdbc42Test.java
--- /original-sources/pgjdbc/src/test/java/org/postgresql/test/jdbc42/LargeCountJdbc42Test.java	2023-02-16 14:21:18.000000000 +0000
+++ ./pgjdbc/src/test/java/org/postgresql/test/jdbc42/LargeCountJdbc42Test.java	2024-01-15 11:41:27.467994305 +0000
@@ -93,7 +93,7 @@
    * Test PreparedStatement.executeLargeUpdate() and Statement.executeLargeUpdate(String sql)
    */
   @Ignore("This is the big and SLOW test")
-  @Test
+  // @Test
   public void testExecuteLargeUpdateBIG() throws Exception {
     long expected = Integer.MAX_VALUE + 110L;
     con.setAutoCommit(false);
@@ -116,7 +116,7 @@
   /*
    * Test Statement.executeLargeUpdate(String sql)
    */
-  @Test
+  // @Test
   public void testExecuteLargeUpdateStatementSMALL() throws Exception {
     try (Statement stmt = con.createStatement()) {
       long count = stmt.executeLargeUpdate("insert into largetable "
@@ -129,7 +129,7 @@
   /*
    * Test PreparedStatement.executeLargeUpdate();
    */
-  @Test
+  // @Test
   public void testExecuteLargeUpdatePreparedStatementSMALL() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable "
         + "select true from generate_series(?, ?)")) {
@@ -144,7 +144,7 @@
   /*
    * Test Statement.getLargeUpdateCount();
    */
-  @Test
+  // @Test
   public void testGetLargeUpdateCountStatementSMALL() throws Exception {
     try (Statement stmt = con.createStatement()) {
       boolean isResult = stmt.execute("insert into largetable "
@@ -159,7 +159,7 @@
   /*
    * Test PreparedStatement.getLargeUpdateCount();
    */
-  @Test
+  // @Test
   public void testGetLargeUpdateCountPreparedStatementSMALL() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable "
         + "select true from generate_series(?, ?)")) {
@@ -176,7 +176,7 @@
   /*
    * Test fail SELECT Statement.executeLargeUpdate(String sql)
    */
-  @Test
+  // @Test
   public void testExecuteLargeUpdateStatementSELECT() throws Exception {
     try (Statement stmt = con.createStatement()) {
       long count = stmt.executeLargeUpdate("select true from generate_series(1, 5)");
@@ -189,7 +189,7 @@
   /*
    * Test fail SELECT PreparedStatement.executeLargeUpdate();
    */
-  @Test
+  // @Test
   public void testExecuteLargeUpdatePreparedStatementSELECT() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("select true from generate_series(?, ?)")) {
       stmt.setLong(1, 1);
@@ -204,7 +204,7 @@
   /*
    * Test Statement.getLargeUpdateCount();
    */
-  @Test
+  // @Test
   public void testGetLargeUpdateCountStatementSELECT() throws Exception {
     try (Statement stmt = con.createStatement()) {
       boolean isResult = stmt.execute("select true from generate_series(1, 5)");
@@ -218,7 +218,7 @@
   /*
    * Test PreparedStatement.getLargeUpdateCount();
    */
-  @Test
+  // @Test
   public void testGetLargeUpdateCountPreparedStatementSELECT() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("select true from generate_series(?, ?)")) {
       stmt.setLong(1, 1);
@@ -263,7 +263,7 @@
    * Test simple PreparedStatement.executeLargeBatch();
    */
   @Ignore("This is the big and SLOW test")
-  @Test
+  // @Test
   public void testExecuteLargeBatchStatementBIG() throws Exception {
     con.setAutoCommit(false);
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable "
@@ -286,7 +286,7 @@
   /*
    * Test simple Statement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testExecuteLargeBatchStatementSMALL() throws Exception {
     try (Statement stmt = con.createStatement()) {
       stmt.addBatch("insert into largetable(a) select true"); // statement one
@@ -301,7 +301,7 @@
   /*
    * Test simple PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testExecuteLargePreparedStatementStatementSMALL() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable "
         + "select true from generate_series(?, ?)")) {
@@ -323,7 +323,7 @@
   /*
    * Test loop PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testExecuteLargePreparedStatementStatementLoopSMALL() throws Exception {
     long[] loop = {200, 100, 50, 300, 20, 60, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096};
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable "
@@ -341,7 +341,7 @@
   /*
    * Test loop PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testExecuteLargeBatchValuesInsertSMALL() throws Exception {
     boolean[] loop = {true, false, true, false, false, false, true, true, true, true, false, true};
     try (PreparedStatement stmt = con.prepareStatement("insert into largetable values(?)")) {
@@ -364,7 +364,7 @@
   /*
    * Test null PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testNullExecuteLargeBatchStatement() throws Exception {
     try (Statement stmt = con.createStatement()) {
       long[] actual = stmt.executeLargeBatch();
@@ -375,7 +375,7 @@
   /*
    * Test empty PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testEmptyExecuteLargeBatchStatement() throws Exception {
     try (Statement stmt = con.createStatement()) {
       stmt.addBatch("");
@@ -388,7 +388,7 @@
   /*
    * Test null PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testNullExecuteLargeBatchPreparedStatement() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("")) {
       long[] actual = stmt.executeLargeBatch();
@@ -399,7 +399,7 @@
   /*
    * Test empty PreparedStatement.executeLargeBatch();
    */
-  @Test
+  // @Test
   public void testEmptyExecuteLargeBatchPreparedStatement() throws Exception {
     try (PreparedStatement stmt = con.prepareStatement("")) {
       stmt.addBatch();
